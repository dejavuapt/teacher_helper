from datetime import date
import logging
from .states import CHOOSING_STUDENTS
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler


logger = logging.getLogger(__name__)

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Start point to get info about day
    """
    # TODO: check if day exist
    
    try:
        total_lessons: int = int(context.args[0])
        # TODO: write connect and store data in DB
        # date: 18.09.2025 
        # lessons: 7
        await update.message.reply_markdown(
            text=f"kk, –∑–∞–ø–∏—Å–∞–ª {total_lessons} —É—Ä–æ–∫–æ–≤ –Ω–∞ {date.today().strftime("%d.%m.%Y")}"
        )
        await show_students(update, context)
    except ValueError:
        await update.message.reply_markdown(
            text="üò¢ –Ω—É–∂–Ω–∞ —Ü–∏—Ñ—Ä–∞, –ø—Ä–∏–º–µ—Ä: `/today 7`, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è 7 —É—Ä–æ–∫–æ–≤"
        )
    except IndexError:
        await update.message.reply_markdown(
            text="üò¢ —Ç—ã –Ω–µ –≤–≤–µ–ª(a) —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤ –±—É–¥–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/today 7`"
        )
    
async def show_students(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Show and choose a students.
    """
    # TODO: get students from DB
    students: tuple[str, ...] = ("–¢–µ—Å—Ç–æ–≤ –ò.–ü.", "–†—É—Å–∫–æ–≤ –ê.–ü.", "–ù–æ–≤–æ—Å–µ–ª –¢.–ü.")
    keyboard = [
        [InlineKeyboardButton(text=f"{student}", callback_data=f"student_{student}") for student in students]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query = update.callback_query
    message_data = {
        "text": "–í—ã–±–µ—Ä–∏ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å",
        "reply_markup": reply_markup
    }
    if query:
        await query.edit_message_text(**message_data)
    else:
        await update.message.reply_text(**message_data)
    
async def student_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    student_name: str = query.data.replace("student_", "")
    
    reasons: list[str] = ["–£–≤–∂. –ø—Ä–∏—á–∏–Ω–∞", "–ë–æ–ª–µ–µ—Ç", "–ü—Ä–æ–≥—É–ª–∏–≤–∞–µ—Ç"]
    keyboard = [
        [InlineKeyboardButton(text=f"{reason}", callback_data=f"reason_{reason}") for reason in reasons] + [InlineKeyboardButton("<<", callback_data="back2show_students")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=f"–ü–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ –Ω–µ—Ç {student_name}?",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    
async def reason_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    reason_choosed: str = query.data.replace("reason_", "")
    
    await query.edit_message_text(
        text=f"–£—Ä–∞, —Ç—ã –≤—ã–±—Ä–∞–ª: {reason_choosed}"
    )

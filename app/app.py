from typing import Any
from datetime import date
import logging
from .states import CHOOSING_STUDENTS
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

# TODO: Time to live of callback query
students: tuple[str, ...] = ("–¢–µ—Å—Ç–æ–≤ –ò.–ü.", "–†—É—Å–∫–æ–≤ –ê.–ü.", "–ù–æ–≤–æ—Å–µ–ª –¢.–ü.")
reasons: dict[str, str] = {"valid": "üéì –£–≤–∂. –ø—Ä–∏—á–∏–Ω–∞",
                           "sick": "üò∑ –ë–æ–ª–µ–µ—Ç", 
                           "not_valid": "üö∂ –ü—Ä–æ–≥—É–ª–∏–≤–∞–µ—Ç" }


logger = logging.getLogger(__name__)

# TODO: –ü—É—Å–∫–∞–π –∫–æ–ª-–≤–æ —É—Ä–æ–∫–æ–≤ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã. –ß—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ –∫–ª–∞—Å—Å–∞–º –Ω–∞–ø—Ä–∏–º–µ—Ä
async def daily_blanks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Start point to get info about day
    """
    # TODO: check if day exist
    await update.message.reply_markdown(
        f"–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –ø—Ä–æ–ø—É—Å–∫–∏ –∑–∞ {date.today().strftime("%d.%m.%Y")}!\n"
        "\n–°–∫–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤?"
    )
    return 1
    
       
async def receive_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_text: str = update.message.text
    try:
        # TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–µ –±–æ–ª—å—à–µ 10
        total_lessons: int = int(user_text)
        # TODO: write connect and store data in DB
        # date: 18.09.2025 
        # lessons: 7
        context.user_data["total_lessons"] = total_lessons
        await update.message.reply_markdown(
            text=f"–°—É–ø–µ—Ä, –∑–∞–ø–∏—Å–∞–ª–∞ {total_lessons} —É—Ä–æ–∫–æ–≤ –Ω–∞ {date.today().strftime("%d.%m.%Y")}"
        )
        await show_students(update, context)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_markdown(
            text="üò¢ –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –∏ —Ç–æ–≥–¥–∞ –º—ã —Å–º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!"
        )
        
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_markdown(
        "–•–æ—Ä–æ—à–æ! –ü–∏—à–∏ —Å–Ω–æ–≤–∞ –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å üòâ"
    )
    return ConversationHandler.END
    

    
async def show_students(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Show and choose a students.
    yes i do dsfsd
    """
    # TODO: get students from DB. 
    # Here need in the DB level check about existing data in db.
    keyboard = [
        [InlineKeyboardButton(text=f"{student}", callback_data=f"student_{student}") for student in students]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query = update.callback_query
    message_data = {
        "text": "–í—ã–±–µ—Ä–∏ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å",
        "reply_markup": reply_markup
    }
    if query:
        await query.edit_message_text(**message_data)
    else:
        await update.message.reply_text(**message_data)
    
async def student_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    student_name: str = query.data.replace("student_", "")
    context.user_data['current_student'] = {
        "name": student_name
    }
    
    keyboard = [
        [InlineKeyboardButton(text=f"{reason}", callback_data=f"reason_{key}") for key, reason in reasons.items()] 
        ,[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–µ–Ω–∏–∫–∞–º", callback_data="back2show_students")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=f"–ü–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ –Ω–µ—Ç {student_name}?",
        parse_mode="Markdown",
        reply_markup=reply_markup)
    
async def reason_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    reason_choosed: str = reasons.get(query.data.replace("reason_", ""))
    student_data = context.user_data.get('current_student')
    student_data['reason'] = reason_choosed
    
    keyboard = [
        [InlineKeyboardButton("–í—Å–µ —É—Ä–æ–∫–∏", callback_data="all_lessons")],
        [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="specify_count")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üóø –£—á–µ–Ω–∏–∫: {student_data.get("name")}"
        f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason_choosed}"
        "\n–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö?",
        reply_markup=reply_markup
    )

async def skipped_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    student_data = context.user_data.get('current_student')
    base_keyboard: list[Any] = [InlineKeyboardButton(
        "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∫ —É—á–µ–Ω–∏–∫–∞–º", callback_data="back2show_students"
    )]
    
    if query.data == 'all_lessons' or 'count_' in query.data:
        if 'count_' in query.data:
            skip_count: int = int(query.data.replace("count_", ""))
        else:
            skip_count: int = context.user_data.get("total_lessons", 0)
        text: str = f"–û—Ç–º–µ—á–µ–Ω–æ {skip_count} —É—Ä–æ–∫–æ–≤ –¥–ª—è {student_data.get("name")} –ø–æ –ø—Ä–∏—á–∏–Ω–µ {student_data.get("reason")}"
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup([base_keyboard])
        )
        return
        
    if query.data == 'specify_count':
        keyboard: list[list[InlineKeyboardButton]] = []
        for i in range(1, context.user_data.get('total_lessons')+1):
            if i % 3 == 1:
                keyboard.append([])
            keyboard[-1].append(InlineKeyboardButton(str(i), callback_data=f"count_{i}"))
            
        keyboard.append([InlineKeyboardButton("–í—Å–µ —É—Ä–æ–∫–∏", callback_data="all_lessons")])
        await query.edit_message_text(
            text=f"{student_data.get("name")} \n –í—ã–±–µ—Ä–∏ –∫–æ–ª-–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return